
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
0000045c l     F .text	00000060 set_msbs_lsb
000004bc l     F .text	00000018 set_parent
000004d4 l     F .text	00000040 dist
00000514 l     F .text	00000018 set_dist
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
000006c0 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000534 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
0000052c g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000574 g       .text	00000000 __text_end
000006c0  w      .debug_info	00000000 .hidden t1b_path_planner_32bit.c.0c421651
02000000 g       .bss	00000000 __bss_start
00000558 g     F .text	0000001c memset
00000054 g     F .text	00000408 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000578 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    57800593          	addi	x11,x0,1400
  1c:	    00000613          	addi	x12,x0,0
  20:	    514000ef          	jal	x1,534 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    524000ef          	jal	x1,558 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    4ec000ef          	jal	x1,52c <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ### }
     ### /*=====================================================================================================*/
     ### // #define path_planned                (&mem[180])
     ### #define N 30
     ### 
     ### int main() {
  54:	          fd010113          	addi	x2,x2,-48
     ###     // start = 0; end = 18;
     ###     /*INIT_GRAPH*/
     ### 	p_graph[0] = 0x1f1f1f01; p_graph[1] = 0x1f00021d; p_graph[2] = 0x1f080301; p_graph[3] = 0x1f1c0402; p_graph[4] = 0x1f060503; p_graph[5] = 0x1f1f1f04; p_graph[6] = 0x1f1f0704; p_graph[7] = 0x1f1f0806; p_graph[8] = 0x7090c02; p_graph[9] = 0x1f0b0a08; p_graph[10] = 0x1f1f1f09; p_graph[11] = 0x1f1f1f09; p_graph[12] = 0x1f130d08; p_graph[13] = 0x1f1f0e0c; p_graph[14] = 0x1f100d0f; p_graph[15] = 0x1f1f1f0e; p_graph[16] = 0x1f12110e; p_graph[17] = 0x1f1f1f10; p_graph[18] = 0x1f1f1310; p_graph[19] = 0x1f140c12; p_graph[20] = 0x18131d15; p_graph[21] = 0x1f171614; p_graph[22] = 0x1f1f1f15; p_graph[23] = 0x1f1f1f15; p_graph[24] = 0x1f1f1914; p_graph[25] = 0x1f1f1a18; p_graph[26] = 0x1f1c191b; p_graph[27] = 0x1f1f1f1a; p_graph[28] = 0x1f031d1a; p_graph[29] = 0x1f141c01; 
  58:	          1f1f2737          	lui	x14,0x1f1f2
  5c:	          020007b7          	lui	x15,0x2000
     ### int main() {
  60:	          02812423          	sw	x8,40(x2)
  64:	          02912223          	sw	x9,36(x2)
  68:	          03212023          	sw	x18,32(x2)
  6c:	          01312e23          	sw	x19,28(x2)
  70:	          02112623          	sw	x1,44(x2)
  74:	          01412c23          	sw	x20,24(x2)
  78:	          01512a23          	sw	x21,20(x2)
  7c:	          01612823          	sw	x22,16(x2)
  80:	          01712623          	sw	x23,12(x2)
  84:	          01812423          	sw	x24,8(x2)
     ### 	p_graph[0] = 0x1f1f1f01; p_graph[1] = 0x1f00021d; p_graph[2] = 0x1f080301; p_graph[3] = 0x1f1c0402; p_graph[4] = 0x1f060503; p_graph[5] = 0x1f1f1f04; p_graph[6] = 0x1f1f0704; p_graph[7] = 0x1f1f0806; p_graph[8] = 0x7090c02; p_graph[9] = 0x1f0b0a08; p_graph[10] = 0x1f1f1f09; p_graph[11] = 0x1f1f1f09; p_graph[12] = 0x1f130d08; p_graph[13] = 0x1f1f0e0c; p_graph[14] = 0x1f100d0f; p_graph[15] = 0x1f1f1f0e; p_graph[16] = 0x1f12110e; p_graph[17] = 0x1f1f1f10; p_graph[18] = 0x1f1f1310; p_graph[19] = 0x1f140c12; p_graph[20] = 0x18131d15; p_graph[21] = 0x1f171614; p_graph[22] = 0x1f1f1f15; p_graph[23] = 0x1f1f1f15; p_graph[24] = 0x1f1f1914; p_graph[25] = 0x1f1f1a18; p_graph[26] = 0x1f1c191b; p_graph[27] = 0x1f1f1f1a; p_graph[28] = 0x1f031d1a; p_graph[29] = 0x1f141c01; 
  88:	          f0170693          	addi	x13,x14,-255 # 1f1f1f01 <__global_pointer$+0x1d1f1701>
  8c:	          02d7ae23          	sw	x13,60(x15) # 200003c <__bss_end+0x3c>
  90:	          1f0006b7          	lui	x13,0x1f000
  94:	          21d68693          	addi	x13,x13,541 # 1f00021d <__global_pointer$+0x1cfffa1d>
  98:	          04d7a023          	sw	x13,64(x15)
  9c:	          1f0806b7          	lui	x13,0x1f080
  a0:	          30168693          	addi	x13,x13,769 # 1f080301 <__global_pointer$+0x1d07fb01>
  a4:	          04d7a223          	sw	x13,68(x15)
  a8:	          1f1c06b7          	lui	x13,0x1f1c0
  ac:	          40268693          	addi	x13,x13,1026 # 1f1c0402 <__global_pointer$+0x1d1bfc02>
  b0:	          04d7a423          	sw	x13,72(x15)
  b4:	          1f0606b7          	lui	x13,0x1f060
  b8:	          50368693          	addi	x13,x13,1283 # 1f060503 <__global_pointer$+0x1d05fd03>
  bc:	          04d7a623          	sw	x13,76(x15)
  c0:	          f0470693          	addi	x13,x14,-252
  c4:	          04d7a823          	sw	x13,80(x15)
  c8:	          1f1f06b7          	lui	x13,0x1f1f0
  cc:	          70468693          	addi	x13,x13,1796 # 1f1f0704 <__global_pointer$+0x1d1eff04>
  d0:	          04d7aa23          	sw	x13,84(x15)
  d4:	          1f1f16b7          	lui	x13,0x1f1f1
  d8:	          80668613          	addi	x12,x13,-2042 # 1f1f0806 <__global_pointer$+0x1d1f0006>
  dc:	          04c7ac23          	sw	x12,88(x15)
  e0:	          07091637          	lui	x12,0x7091
  e4:	          c0260613          	addi	x12,x12,-1022 # 7090c02 <__global_pointer$+0x5090402>
  e8:	          04c7ae23          	sw	x12,92(x15)
  ec:	          1f0b1637          	lui	x12,0x1f0b1
  f0:	          a0860613          	addi	x12,x12,-1528 # 1f0b0a08 <__global_pointer$+0x1d0b0208>
  f4:	          06c7a023          	sw	x12,96(x15)
  f8:	          f0970613          	addi	x12,x14,-247
  fc:	          06c7a223          	sw	x12,100(x15)
 100:	          06c7a423          	sw	x12,104(x15)
 104:	          1f131637          	lui	x12,0x1f131
 108:	          d0860613          	addi	x12,x12,-760 # 1f130d08 <__global_pointer$+0x1d130508>
 10c:	          06c7a623          	sw	x12,108(x15)
 110:	          e0c68613          	addi	x12,x13,-500
 114:	          06c7a823          	sw	x12,112(x15)
 118:	          1f101637          	lui	x12,0x1f101
 11c:	          d0f60613          	addi	x12,x12,-753 # 1f100d0f <__global_pointer$+0x1d10050f>
 120:	          06c7aa23          	sw	x12,116(x15)
 124:	          f0e70613          	addi	x12,x14,-242
 128:	          06c7ac23          	sw	x12,120(x15)
 12c:	          1f121637          	lui	x12,0x1f121
 130:	          10e60613          	addi	x12,x12,270 # 1f12110e <__global_pointer$+0x1d12090e>
 134:	          06c7ae23          	sw	x12,124(x15)
 138:	          f1070613          	addi	x12,x14,-240
 13c:	          08c7a023          	sw	x12,128(x15)
 140:	          31068693          	addi	x13,x13,784
 144:	          08d7a223          	sw	x13,132(x15)
 148:	          1f1416b7          	lui	x13,0x1f141
 14c:	          c1268693          	addi	x13,x13,-1006 # 1f140c12 <__global_pointer$+0x1d140412>
 150:	          08d7a423          	sw	x13,136(x15)
 154:	          181326b7          	lui	x13,0x18132
 158:	          d1568693          	addi	x13,x13,-747 # 18131d15 <__global_pointer$+0x16131515>
 15c:	          08d7a623          	sw	x13,140(x15)
 160:	          1f1716b7          	lui	x13,0x1f171
 164:	          61468693          	addi	x13,x13,1556 # 1f171614 <__global_pointer$+0x1d170e14>
 168:	          08d7a823          	sw	x13,144(x15)
 16c:	          f1570693          	addi	x13,x14,-235
 170:	          08d7aa23          	sw	x13,148(x15)
 174:	          08d7ac23          	sw	x13,152(x15)
 178:	          91470693          	addi	x13,x14,-1772
 17c:	          08d7ae23          	sw	x13,156(x15)
 180:	          a1870693          	addi	x13,x14,-1512
 184:	          0ad7a023          	sw	x13,160(x15)
 188:	          1f1c26b7          	lui	x13,0x1f1c2
 18c:	          91b68693          	addi	x13,x13,-1765 # 1f1c191b <__global_pointer$+0x1d1c111b>
 190:	          0ad7a223          	sw	x13,164(x15)
 194:	          f1a70713          	addi	x14,x14,-230
 198:	          0ae7a423          	sw	x14,168(x15)
 19c:	          1f032737          	lui	x14,0x1f032
 1a0:	          d1a70713          	addi	x14,x14,-742 # 1f031d1a <__global_pointer$+0x1d03151a>
 1a4:	          0ae7a623          	sw	x14,172(x15)
 1a8:	          1f142737          	lui	x14,0x1f142
 1ac:	          c0170713          	addi	x14,x14,-1023 # 1f141c01 <__global_pointer$+0x1d141401>
 1b0:	          0ae7a823          	sw	x14,176(x15)
     ### 	//parent also needs to be initialized cos X is a bitch
     ###     *p_visited = 0; *p_ldist = 0; *p_lparent = 0;
 1b4:	          0007a823          	sw	x0,16(x15)
 1b8:	          0007ac23          	sw	x0,24(x15)
 1bc:	          0007aa23          	sw	x0,20(x15)
     ###     p_parent[0] = 0; p_parent[1] = 0; p_parent[2] = 0; p_parent[3] = 0;
 1c0:	          0007ae23          	sw	x0,28(x15)
 1c4:	          0207a023          	sw	x0,32(x15)
 1c8:	          0207a223          	sw	x0,36(x15)
 1cc:	          0207a423          	sw	x0,40(x15)
     ###     p_dist[0] = 0; p_dist[1] = 0; p_dist[2] = 0; p_dist[3] = 0;
 1d0:	          0207a623          	sw	x0,44(x15)
 1d4:	          0207a823          	sw	x0,48(x15)
 1d8:	          0207aa23          	sw	x0,52(x15)
 1dc:	          0207ac23          	sw	x0,56(x15)
     ### 	for (uint32_t i = 0; i < N; ++i) {set_dist(i, 31); set_visited(i, 0); set_parent(i, 0);}   
 1e0:	          00000413          	addi	x8,x0,0
     ###     p[0] = (p[0] & ((1 << i) ^ 0xFFFFFFFF)) | (v << i);
 1e4:	          020004b7          	lui	x9,0x2000
 1e8:	          00100993          	addi	x19,x0,1
     ### 	for (uint32_t i = 0; i < N; ++i) {set_dist(i, 31); set_visited(i, 0); set_parent(i, 0);}   
 1ec:	          01e00913          	addi	x18,x0,30
 1f0:	      /-> 00040513          	addi	x10,x8,0
 1f4:	      |   01f00593          	addi	x11,x0,31
 1f8:	      |   31c000ef          	jal	x1,514 <set_dist>
     ###     p[0] = (p[0] & ((1 << i) ^ 0xFFFFFFFF)) | (v << i);
 1fc:	      |   0104a703          	lw	x14,16(x9) # 2000010 <__bss_end+0x10>
 200:	      |   008997b3          	sll	x15,x19,x8
 204:	      |   fff7c793          	xori	x15,x15,-1
 208:	      |   00e7f7b3          	and	x15,x15,x14
     ### 	for (uint32_t i = 0; i < N; ++i) {set_dist(i, 31); set_visited(i, 0); set_parent(i, 0);}   
 20c:	      |   00040513          	addi	x10,x8,0
     ###     p[0] = (p[0] & ((1 << i) ^ 0xFFFFFFFF)) | (v << i);
 210:	      |   00f4a823          	sw	x15,16(x9)
     ### 	for (uint32_t i = 0; i < N; ++i) {set_dist(i, 31); set_visited(i, 0); set_parent(i, 0);}   
 214:	      |   00000593          	addi	x11,x0,0
 218:	      |   00140413          	addi	x8,x8,1
 21c:	      |   2a0000ef          	jal	x1,4bc <set_parent>
 220:	      \-- fd2418e3          	bne	x8,x18,1f0 <__ram_size+0xf0>
     ###     set_dist(end, 0); set_parent(end, 31);
 224:	          0044a503          	lw	x10,4(x9)
 228:	          00000593          	addi	x11,x0,0
 22c:	          01d00b13          	addi	x22,x0,29
 230:	          2e4000ef          	jal	x1,514 <set_dist>
 234:	          0044a503          	lw	x10,4(x9)
 238:	          01f00593          	addi	x11,x0,31
     ###     uint32_t min_dist; uint32_t min_index;
     ###     for (uint32_t i = 0; i < (N - 1); ++i) {
     ###         // finding start node for next iteration
     ###         min_dist = 31;
 23c:	          01f00a93          	addi	x21,x0,31
     ###     set_dist(end, 0); set_parent(end, 31);
 240:	          27c000ef          	jal	x1,4bc <set_parent>
     ###     return (p[0] >> i) & 1;
 244:	          02000937          	lui	x18,0x2000
     ###         for (uint32_t j = 0; j < N; ++j) {
 248:	          01e00b93          	addi	x23,x0,30
     ###     p[0] = (p[0] & ((1 << i) ^ 0xFFFFFFFF)) | (v << i);
 24c:	          00100c13          	addi	x24,x0,1
     ###         for (uint32_t j = 0; j < N; ++j) {
 250:	/-------> 00000413          	addi	x8,x0,0
     ###         min_dist = 31;
 254:	|         01f00493          	addi	x9,x0,31
     ###             uint32_t d = dist(j);
 258:	|  /----> 00040513          	addi	x10,x8,0
 25c:	|  |      278000ef          	jal	x1,4d4 <dist>
     ###     return (p[0] >> i) & 1;
 260:	|  |      01092783          	lw	x15,16(x18) # 2000010 <__bss_end+0x10>
 264:	|  |      0087d7b3          	srl	x15,x15,x8
 268:	|  |      0017f793          	andi	x15,x15,1
     ###             if (!visited(j) && d < min_dist){
 26c:	|  |  /-- 00079863          	bne	x15,x0,27c <__ram_size+0x17c>
 270:	|  |  +-- 00957663          	bgeu	x10,x9,27c <__ram_size+0x17c>
 274:	|  |  |   00040a13          	addi	x20,x8,0
 278:	|  |  |   00050493          	addi	x9,x10,0
     ###         for (uint32_t j = 0; j < N; ++j) {
 27c:	|  |  \-> 00140413          	addi	x8,x8,1
 280:	|  \----- fd741ce3          	bne	x8,x23,258 <__ram_size+0x158>
     ###     p[0] = (p[0] & ((1 << i) ^ 0xFFFFFFFF)) | (v << i);
 284:	|         01092683          	lw	x13,16(x18)
 288:	|         014c1733          	sll	x14,x24,x20
 28c:	|         fff74793          	xori	x15,x14,-1
 290:	|         00d7f7b3          	and	x15,x15,x13
     ###             }
     ###         }
     ###         set_visited(min_index, 1);
     ###         uint32_t d_min = dist(min_index) + 1;
     ###         // for (uint32_t j = 0; j < 4; ++j) {
     ###         uint32_t node = p_graph[min_index] & 0xff;
 294:	|         00fa0993          	addi	x19,x20,15
     ###     p[0] = (p[0] & ((1 << i) ^ 0xFFFFFFFF)) | (v << i);
 298:	|         00e7e7b3          	or	x15,x15,x14
     ###         uint32_t node = p_graph[min_index] & 0xff;
 29c:	|         00299993          	slli	x19,x19,0x2
     ###     p[0] = (p[0] & ((1 << i) ^ 0xFFFFFFFF)) | (v << i);
 2a0:	|         00f92823          	sw	x15,16(x18)
     ###         uint32_t d_min = dist(min_index) + 1;
 2a4:	|         000a0513          	addi	x10,x20,0
     ###         uint32_t node = p_graph[min_index] & 0xff;
 2a8:	|         013909b3          	add	x19,x18,x19
     ###         uint32_t d_min = dist(min_index) + 1;
 2ac:	|         228000ef          	jal	x1,4d4 <dist>
     ###         uint32_t node = p_graph[min_index] & 0xff;
 2b0:	|         0009a483          	lw	x9,0(x19)
     ###         uint32_t d_min = dist(min_index) + 1;
 2b4:	|         00150413          	addi	x8,x10,1
     ###         uint32_t node = p_graph[min_index] & 0xff;
 2b8:	|         0ff4f493          	andi	x9,x9,255
     ###         if (node != 31) {
 2bc:	|     /-- 03548c63          	beq	x9,x21,2f4 <__ram_size+0x1f4>
     ###     return (p[0] >> i) & 1;
 2c0:	|     |   01092783          	lw	x15,16(x18)
 2c4:	|     |   0097d7b3          	srl	x15,x15,x9
 2c8:	|     |   0017f793          	andi	x15,x15,1
     ###             if (!visited(node) && d_min < dist(node)) {
 2cc:	|     +-- 02079463          	bne	x15,x0,2f4 <__ram_size+0x1f4>
 2d0:	|     |   00048513          	addi	x10,x9,0
 2d4:	|     |   200000ef          	jal	x1,4d4 <dist>
 2d8:	|     +-- 00a47e63          	bgeu	x8,x10,2f4 <__ram_size+0x1f4>
     ###                 set_dist(node, d_min); set_parent(node, min_index);
 2dc:	|     |   00040593          	addi	x11,x8,0
 2e0:	|     |   00048513          	addi	x10,x9,0
 2e4:	|     |   230000ef          	jal	x1,514 <set_dist>
 2e8:	|     |   000a0593          	addi	x11,x20,0
 2ec:	|     |   00048513          	addi	x10,x9,0
 2f0:	|     |   1cc000ef          	jal	x1,4bc <set_parent>
     ###             }
     ###         }
     ###         node = (p_graph[min_index] >> 8) & 0xff;
 2f4:	|     \-> 0009a483          	lw	x9,0(x19)
 2f8:	|         0084d493          	srli	x9,x9,0x8
 2fc:	|         0ff4f493          	andi	x9,x9,255
     ###         if (node != 31) {
 300:	|     /-- 03548c63          	beq	x9,x21,338 <__ram_size+0x238>
     ###     return (p[0] >> i) & 1;
 304:	|     |   01092783          	lw	x15,16(x18)
 308:	|     |   0097d7b3          	srl	x15,x15,x9
 30c:	|     |   0017f793          	andi	x15,x15,1
     ###             if (!visited(node) && d_min < dist(node)) {
 310:	|     +-- 02079463          	bne	x15,x0,338 <__ram_size+0x238>
 314:	|     |   00048513          	addi	x10,x9,0
 318:	|     |   1bc000ef          	jal	x1,4d4 <dist>
 31c:	|     +-- 00a47e63          	bgeu	x8,x10,338 <__ram_size+0x238>
     ###                 set_dist(node, d_min); set_parent(node, min_index);
 320:	|     |   00040593          	addi	x11,x8,0
 324:	|     |   00048513          	addi	x10,x9,0
 328:	|     |   1ec000ef          	jal	x1,514 <set_dist>
 32c:	|     |   000a0593          	addi	x11,x20,0
 330:	|     |   00048513          	addi	x10,x9,0
 334:	|     |   188000ef          	jal	x1,4bc <set_parent>
     ###             }
     ###         }
     ###         node = (p_graph[min_index] >> 16) & 0xff;
 338:	|     \-> 0009a483          	lw	x9,0(x19)
 33c:	|         0104d493          	srli	x9,x9,0x10
 340:	|         0ff4f493          	andi	x9,x9,255
     ###         if (node != 31) {
 344:	|     /-- 03548c63          	beq	x9,x21,37c <__ram_size+0x27c>
     ###     return (p[0] >> i) & 1;
 348:	|     |   01092783          	lw	x15,16(x18)
 34c:	|     |   0097d7b3          	srl	x15,x15,x9
 350:	|     |   0017f793          	andi	x15,x15,1
     ###             if (!visited(node) && d_min < dist(node)) {
 354:	|     +-- 02079463          	bne	x15,x0,37c <__ram_size+0x27c>
 358:	|     |   00048513          	addi	x10,x9,0
 35c:	|     |   178000ef          	jal	x1,4d4 <dist>
 360:	|     +-- 00a47e63          	bgeu	x8,x10,37c <__ram_size+0x27c>
     ###                 set_dist(node, d_min); set_parent(node, min_index);
 364:	|     |   00040593          	addi	x11,x8,0
 368:	|     |   00048513          	addi	x10,x9,0
 36c:	|     |   1a8000ef          	jal	x1,514 <set_dist>
 370:	|     |   000a0593          	addi	x11,x20,0
 374:	|     |   00048513          	addi	x10,x9,0
 378:	|     |   144000ef          	jal	x1,4bc <set_parent>
     ###             }
     ###         }
     ###         node = (p_graph[min_index] >> 24) & 0xff;
 37c:	|     \-> 0009a483          	lw	x9,0(x19)
 380:	|         0184d493          	srli	x9,x9,0x18
     ###         if (node != 31) {
 384:	|     /-- 03548c63          	beq	x9,x21,3bc <__ram_size+0x2bc>
     ###     return (p[0] >> i) & 1;
 388:	|     |   01092783          	lw	x15,16(x18)
 38c:	|     |   0097d7b3          	srl	x15,x15,x9
 390:	|     |   0017f793          	andi	x15,x15,1
     ###             if (!visited(node) && d_min < dist(node)) {
 394:	|     +-- 02079463          	bne	x15,x0,3bc <__ram_size+0x2bc>
 398:	|     |   00048513          	addi	x10,x9,0
 39c:	|     |   138000ef          	jal	x1,4d4 <dist>
 3a0:	|     +-- 00a47e63          	bgeu	x8,x10,3bc <__ram_size+0x2bc>
     ###                 set_dist(node, d_min); set_parent(node, min_index);
 3a4:	|     |   00040593          	addi	x11,x8,0
 3a8:	|     |   00048513          	addi	x10,x9,0
 3ac:	|     |   168000ef          	jal	x1,514 <set_dist>
 3b0:	|     |   000a0593          	addi	x11,x20,0
 3b4:	|     |   00048513          	addi	x10,x9,0
 3b8:	|     |   104000ef          	jal	x1,4bc <set_parent>
     ###     for (uint32_t i = 0; i < (N - 1); ++i) {
 3bc:	|     \-> fffb0b13          	addi	x22,x22,-1
 3c0:	\-------- e80b18e3          	bne	x22,x0,250 <__ram_size+0x150>
     ###     }
     ###     // if (start == 0) {
     ###     //     node_point = 0;
     ###     //     start = 1;
     ###     // }
     ###     node_point = start;
 3c4:	          020007b7          	lui	x15,0x2000
 3c8:	          0007a703          	lw	x14,0(x15) # 2000000 <__bss_end>
     ###     uint32_t curr = start;
     ###     // for (uint32_t i = 0; i < N; ++i) {mem[54] = dist(i); mem[55] = parent(i);}
     ###     // for (uint32_t i = 0; i < N; ++i) {printf("%d distance : %d parent : %d\n", i, dist(i), parent(i));}
     ###     // Loop to print the path from the parent array
     ###     while (curr != end) {
 3cc:	          020006b7          	lui	x13,0x2000
     ###     return (p[i/8] >> 4*(i%8)) & 0xf;
 3d0:	          01c68513          	addi	x10,x13,28 # 200001c <__bss_end+0x1c>
     ###     node_point = start;
 3d4:	          00e7a423          	sw	x14,8(x15)
     ###     uint32_t curr = start;
 3d8:	          0007a703          	lw	x14,0(x15)
     ###     while (curr != end) {
 3dc:	   /----> 0046a783          	lw	x15,4(x13)
 3e0:	   |  /-- 04e79063          	bne	x15,x14,420 <__ram_size+0x320>
     ###     cpu_done = 1;
     ###     // mem[54] = parent(29);
     ###     //node_point = end;
     ###     // printf("%d\n", end);  
     ###     return 0;
 3e4:	   |  |   02c12083          	lw	x1,44(x2)
 3e8:	   |  |   02812403          	lw	x8,40(x2)
     ###     cpu_done = 1;
 3ec:	   |  |   00100793          	addi	x15,x0,1
 3f0:	   |  |   00f6a623          	sw	x15,12(x13)
 3f4:	   |  |   02412483          	lw	x9,36(x2)
 3f8:	   |  |   02012903          	lw	x18,32(x2)
 3fc:	   |  |   01c12983          	lw	x19,28(x2)
 400:	   |  |   01812a03          	lw	x20,24(x2)
 404:	   |  |   01412a83          	lw	x21,20(x2)
 408:	   |  |   01012b03          	lw	x22,16(x2)
 40c:	   |  |   00c12b83          	lw	x23,12(x2)
 410:	   |  |   00812c03          	lw	x24,8(x2)
 414:	   |  |   00000513          	addi	x10,x0,0
 418:	   |  |   03010113          	addi	x2,x2,48
 41c:	   |  |   00008067          	jalr	x0,0(x1)
     ###     return (p[i/8] >> 4*(i%8)) & 0xf;
 420:	   |  \-> 00375793          	srli	x15,x14,0x3
 424:	   |      00279793          	slli	x15,x15,0x2
 428:	   |      00a787b3          	add	x15,x15,x10
 42c:	   |      0007a783          	lw	x15,0(x15)
 430:	   |      00777593          	andi	x11,x14,7
     ###     return (p[0] >> i) & 1;
 434:	   |      0146a603          	lw	x12,20(x13)
     ###     return (p[i/8] >> 4*(i%8)) & 0xf;
 438:	   |      00259593          	slli	x11,x11,0x2
 43c:	   |      00b7d7b3          	srl	x15,x15,x11
     ###     return (get_halfbyte(p0, i) << 1) | get_bitfield(p1, i);
 440:	   |      00179793          	slli	x15,x15,0x1
     ###     return (p[0] >> i) & 1;
 444:	   |      00e65733          	srl	x14,x12,x14
     ###     return (get_halfbyte(p0, i) << 1) | get_bitfield(p1, i);
 448:	   |      01e7f793          	andi	x15,x15,30
     ###     return (p[0] >> i) & 1;
 44c:	   |      00177713          	andi	x14,x14,1
     ###     return (get_halfbyte(p0, i) << 1) | get_bitfield(p1, i);
 450:	   |      00e7e733          	or	x14,x15,x14
     ###         node_point = curr;
 454:	   |      00e6a423          	sw	x14,8(x13)
 458:	   \----- f85ff06f          	jal	x0,3dc <__ram_size+0x2dc>

0000045c <set_msbs_lsb>:
     ###     p[i/8] = (p[i/8] & ((0xf << 4*(i%8)) ^ 0xFFFFFFFF)) | (v << 4*(i%8));
 45c:	00365793          	srli	x15,x12,0x3
 460:	00279793          	slli	x15,x15,0x2
 464:	00f50533          	add	x10,x10,x15
 468:	00767713          	andi	x14,x12,7
 46c:	00052803          	lw	x16,0(x10)
 470:	00271713          	slli	x14,x14,0x2

 
 474:	00f00793          	addi	x15,x0,15
 478:	00e797b3          	sll	x15,x15,x14
 47c:	fff7c793          	xori	x15,x15,-1
 480:	0107f7b3          	and	x15,x15,x16
     ###     set_halfbyte(p0, i, (nv >> 1));
 484:	0016d813          	srli	x16,x13,0x1
     ###     p[i/8] = (p[i/8] & ((0xf << 4*(i%8)) ^ 0xFFFFFFFF)) | (v << 4*(i%8));
 488:	00e81733          	sll	x14,x16,x14
 48c:	00e7e7b3          	or	x15,x15,x14
 490:	00f52023          	sw	x15,0(x10)
     ###     p[0] = (p[0] & ((1 << i) ^ 0xFFFFFFFF)) | (v << i);
 494:	0005a703          	lw	x14,0(x11)
 498:	00100793          	addi	x15,x0,1
 49c:	00c797b3          	sll	x15,x15,x12
 4a0:	fff7c793          	xori	x15,x15,-1
     ###     set_bitfield(p1, i, (nv & 1));
 4a4:	0016f693          	andi	x13,x13,1
     ###     p[0] = (p[0] & ((1 << i) ^ 0xFFFFFFFF)) | (v << i);
 4a8:	00e7f7b3          	and	x15,x15,x14
 4ac:	00c69633          	sll	x12,x13,x12
 4b0:	00c7e633          	or	x12,x15,x12
 4b4:	00c5a023          	sw	x12,0(x11)
     ### }
 4b8:	00008067          	jalr	x0,0(x1)

000004bc <set_parent>:
     ### const static inline void set_parent(uint32_t i, uint32_t nv) {
 4bc:	00050613          	addi	x12,x10,0
     ###     set_msbs_lsb(p_parent, p_lparent, i, nv);
 4c0:	02000537          	lui	x10,0x2000
     ### const static inline void set_parent(uint32_t i, uint32_t nv) {
 4c4:	00058693          	addi	x13,x11,0
     ###     set_msbs_lsb(p_parent, p_lparent, i, nv);
 4c8:	01450593          	addi	x11,x10,20 # 2000014 <__bss_end+0x14>
 4cc:	01c50513          	addi	x10,x10,28
 4d0:	f8dff06f          	jal	x0,45c <set_msbs_lsb>

000004d4 <dist>:
     ###     return (p[i/8] >> 4*(i%8)) & 0xf;
 4d4:	00355793          	srli	x15,x10,0x3
 4d8:	02000737          	lui	x14,0x2000
 4dc:	02c70693          	addi	x13,x14,44 # 200002c <__bss_end+0x2c>
 4e0:	00279793          	slli	x15,x15,0x2
 4e4:	00d787b3          	add	x15,x15,x13
 4e8:	0007a783          	lw	x15,0(x15)
 4ec:	00757693          	andi	x13,x10,7
     ###     return (p[0] >> i) & 1;
 4f0:	01872703          	lw	x14,24(x14)
     ###     return (p[i/8] >> 4*(i%8)) & 0xf;
 4f4:	00269693          	slli	x13,x13,0x2
 4f8:	00d7d7b3          	srl	x15,x15,x13
     ###     return (p[0] >> i) & 1;
 4fc:	00a75533          	srl	x10,x14,x10
     ###     return (get_halfbyte(p0, i) << 1) | get_bitfield(p1, i);
 500:	00179793          	slli	x15,x15,0x1
 504:	01e7f793          	andi	x15,x15,30
     ###     return (p[0] >> i) & 1;
 508:	00157513          	andi	x10,x10,1
     ### }
 50c:	00a7e533          	or	x10,x15,x10
 510:	00008067          	jalr	x0,0(x1)

00000514 <set_dist>:
     ### const static inline void set_dist(uint32_t i, uint32_t nv) {
 514:	00050613          	addi	x12,x10,0
     ###     set_msbs_lsb(p_dist, p_ldist, i, nv);
 518:	02000537          	lui	x10,0x2000
     ### const static inline void set_dist(uint32_t i, uint32_t nv) {
 51c:	00058693          	addi	x13,x11,0
     ###     set_msbs_lsb(p_dist, p_ldist, i, nv);
 520:	01850593          	addi	x11,x10,24 # 2000018 <__bss_end+0x18>
 524:	02c50513          	addi	x10,x10,44
 528:	f35ff06f          	jal	x0,45c <set_msbs_lsb>

0000052c <_set_tls>:
 52c:	00050213          	addi	x4,x10,0
 530:	00008067          	jalr	x0,0(x1)

00000534 <memcpy>:
 534:	       00050313          	addi	x6,x10,0
 538:	/----- 00060e63          	beq	x12,x0,554 <memcpy+0x20>
 53c:	|  /-> 00058383          	lb	x7,0(x11)
 540:	|  |   00730023          	sb	x7,0(x6)
 544:	|  |   fff60613          	addi	x12,x12,-1
 548:	|  |   00130313          	addi	x6,x6,1
 54c:	|  |   00158593          	addi	x11,x11,1
 550:	|  \-- fe0616e3          	bne	x12,x0,53c <memcpy+0x8>
 554:	\----> 00008067          	jalr	x0,0(x1)

00000558 <memset>:
 558:	       00050313          	addi	x6,x10,0
 55c:	/----- 00060a63          	beq	x12,x0,570 <memset+0x18>
 560:	|  /-> 00b30023          	sb	x11,0(x6)
 564:	|  |   fff60613          	addi	x12,x12,-1
 568:	|  |   00130313          	addi	x6,x6,1
 56c:	|  \-- fe061ae3          	bne	x12,x0,560 <memset+0x8>
 570:	\----> 00008067          	jalr	x0,0(x1)

00000574 <__text_end>:
 574:	0000                	c.unimp
	...
